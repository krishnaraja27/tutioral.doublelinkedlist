class Node:
    def __init__(self, value):
        self.value = value
        self.prev = None
        self.next = None

class Stack:
    def __init__(self):
        self.head = None
        self.tail = None

    def is_empty(self):
        return self.head is None

    def push(self, value):
        new_node = Node(value)
        if self.is_empty():
            self.head = self.tail = new_node
        else:
            new_node.next = self.head
            self.head.prev = new_node
            self.head = new_node

    def pop(self):
        if self.is_empty():
            return None
        else:
            result = self.head.value
            if self.head == self.tail:
                self.head = self.tail = None
            else:
                self.head = self.head.next
                self.head.prev = None
            return result

    def peek(self):
        if self.is_empty():
            return None
        else:
            return self.head.value

    def insert(self, value, index):
        if self.is_empty():
            return None
        elif self.head.value == value:
            new_node = Node(value)
            self.head.next = new_node
            new_node.prev = self.head
        else:
            current = self.head
            count = 0
            while current and count < index:
                current = current.next
                previous = current
                count += 1
            if count == index:
                new_node = Node(value)
                new_node.prev = previous
                new_node.next = current
                if current:
                    current.prev = new_node
                previous.next = new_node
    def delete(self,index):
        if self.is_empty():
            return None
        elif index==0:
            if self.head==self.tail:
                self.head=self.tail=None
            else:
                self.head=self.head.next
                self.head.prev=None
            r
        else:
            current=self.head
            previous=None
            count=0
            while current and count<index:
                current=current.next
                previous=current
                count+=1
                if count==index:
                    previous.next=current.next
                    current.next=None
                if current:
                    previous.next=current.next
# Example usage:
maddu = Stack()
maddu.push(10)
maddu.push(20)
maddu.push(30)
maddu.insert(2,1)
print(maddu.pop())
print(maddu.peek())
